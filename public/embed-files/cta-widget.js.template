(function() {
    'use strict';

    // Widget configuration
    const API_URL = '{{API_URL}}';
    const RULES_URL = '{{RULES_URL}}';
    const WIDGET_ID = 'cta-widget-' + Math.random().toString(36).substr(2, 9);
    const BUTTON_COLOR = '{{BUTTON_COLOR}}';
    const BUTTON_TEXT_COLOR = '{{BUTTON_TEXT_COLOR}}';
    const BUTTON_SIZE = '{{BUTTON_SIZE}}';
    const BUTTON_POSITION = '{{BUTTON_POSITION}}';
    const BUTTON_TEXT = '{{BUTTON_TEXT}}';

    // Create styles
    const styles = `
        #${WIDGET_ID} {
            position: fixed;
            ${BUTTON_POSITION === 'bottom-right' ? 'bottom: 20px; right: 20px;' : ''}
            ${BUTTON_POSITION === 'bottom-left' ? 'bottom: 20px; left: 20px;' : ''}
            ${BUTTON_POSITION === 'top-right' ? 'top: 20px; right: 20px;' : ''}
            ${BUTTON_POSITION === 'top-left' ? 'top: 20px; left: 20px;' : ''}
            z-index: 999999;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            display: none;
        }

        #${WIDGET_ID} .cta-btn {
            background: ${BUTTON_COLOR};
            color: ${BUTTON_TEXT_COLOR};
            border: none;
            padding: ${BUTTON_SIZE === 'small' ? '8px 16px' : BUTTON_SIZE === 'large' ? '16px 32px' : '12px 24px'};
            border-radius: 30px;
            cursor: pointer;
            font-size: ${BUTTON_SIZE === 'small' ? '14px' : BUTTON_SIZE === 'large' ? '18px' : '16px'};
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        #${WIDGET_ID} .cta-btn:hover {
            filter: brightness(90%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }
    `;

    // Inject styles
    const styleSheet = document.createElement('style');
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);

    // Create widget container
    const widgetContainer = document.createElement('div');
    widgetContainer.id = WIDGET_ID;
    document.body.appendChild(widgetContainer);

    // Variables
    let rules = [];
    let matchedRule = null;

    // Fetch rules from API
    async function fetchRules() {
        try {
            const response = await fetch(RULES_URL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            const data = await response.json();
            if (data.rules) {
                rules = data.rules;
                checkUrlAndShowButton();
            }
        } catch (error) {
            console.error('CTA Widget: Failed to fetch rules', error);
        }
    }

    // Check if current URL matches any rule
    function checkUrlAndShowButton() {
        const currentPath = window.location.pathname;
        
        // Sort rules by priority (highest first)
        const sortedRules = [...rules].sort((a, b) => b.priority - a.priority);
        
        for (const rule of sortedRules) {
            if (matchesPattern(currentPath, rule.pattern)) {
                matchedRule = rule;
                showButton(rule);
                break;
            }
        }
    }

    // Pattern matching function
    function matchesPattern(url, pattern) {
        // Convert pattern to regex
        let regexPattern = pattern;
        
        // If pattern doesn't start with ^ or /, treat it as a simple pattern
        if (!/^[\^\/]/.test(pattern)) {
            // Escape special regex characters except parentheses
            regexPattern = pattern.replace(/[.*+?^${}|[\]\\]/g, '\\$&');
            // Replace escaped parentheses back to capture groups
            regexPattern = regexPattern.replace(/\\\(/g, '(').replace(/\\\)/g, ')');
            // Add anchors
            regexPattern = '^' + regexPattern + '$';
        }
        
        try {
            const regex = new RegExp(regexPattern);
            return regex.test(url);
        } catch (e) {
            console.error('CTA Widget: Invalid pattern', pattern, e);
            return false;
        }
    }

    // Get destination URL with parameters replaced
    function getDestinationUrl(sourceUrl, pattern, destination) {
        let regexPattern = pattern;
        
        if (!/^[\^\/]/.test(pattern)) {
            regexPattern = pattern.replace(/[.*+?^${}|[\]\\]/g, '\\$&');
            regexPattern = regexPattern.replace(/\\\(/g, '(').replace(/\\\)/g, ')');
            regexPattern = '^' + regexPattern + '$';
        }
        
        try {
            const regex = new RegExp(regexPattern);
            const matches = sourceUrl.match(regex);
            
            if (matches) {
                let finalUrl = destination;
                for (let i = 1; i < matches.length; i++) {
                    finalUrl = finalUrl.replace('$' + i, matches[i]);
                }
                return finalUrl;
            }
        } catch (e) {
            console.error('CTA Widget: Error processing destination URL', e);
        }
        
        return destination;
    }

    // Show the button
    function showButton(rule) {
        const button = document.createElement('a');
        button.className = 'cta-btn';
        button.textContent = BUTTON_TEXT;
        button.target = '_blank';
        button.rel = 'noopener noreferrer';
        
        const destinationUrl = getDestinationUrl(window.location.pathname, rule.pattern, rule.destination);
        button.href = destinationUrl;
        
        // Track click
        button.addEventListener('click', () => {
            trackClick(rule.id);
        });
        
        widgetContainer.appendChild(button);
        widgetContainer.style.display = 'block';
    }

    // Track button click
    async function trackClick(ruleId) {
        try {
            await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    page_url: window.location.href,
                    rule_id: ruleId,
                    metadata: {
                        user_agent: navigator.userAgent,
                        screen_resolution: `${screen.width}x${screen.height}`,
                        viewport_size: `${window.innerWidth}x${window.innerHeight}`,
                        timestamp: new Date().toISOString(),
                    }
                })
            });
        } catch (error) {
            console.error('CTA Widget: Failed to track click', error);
        }
    }

    // Initialize
    fetchRules();

    // Listen for URL changes (for SPAs)
    let lastUrl = window.location.href;
    new MutationObserver(() => {
        const url = window.location.href;
        if (url !== lastUrl) {
            lastUrl = url;
            widgetContainer.innerHTML = '';
            widgetContainer.style.display = 'none';
            matchedRule = null;
            checkUrlAndShowButton();
        }
    }).observe(document, { subtree: true, childList: true });
})();